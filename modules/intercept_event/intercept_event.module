<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\TypedData\DataDefinition;

/**
 * Implements hook_theme().
 */
function intercept_event_theme() {
  return [
    'event_attendance_scan_form' => [
      'render element' => 'form',
    ],
    'event_registration_event_form' => [
      'render element' => 'form',
    ],
    'event_recurrence_event_form' => [
      'render element' => 'form',
    ],
    'events_recommended' => [
      'variables' => ['content' => NULL],
      'template' => 'events-recommended',
    ],
    'node_event_analysis' => [
      'variables' => ['content' => NULL],
      'template' => 'node-event-analysis',
    ],
    'node_event_registrations' => [
      'variables' => ['content' => NULL],
      'template' => 'node-event-registrations',
    ],
  ];
}

/**
 * Implements hook_entity_access().
 */
function intercept_event_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if ($entity->getEntityTypeId()== 'flagging' && $entity->bundle() == 'saved_event' && $operation == 'view') {
    $permissions = [
      'view saved_event flagging entities',
      'administer flaggings'
    ];
    if ($entity->getOwnerId() == $account->id()) {
      $permissions[] = 'view own saved_event flagging entities';
    }
    return AccessResult::allowedIfHasPermissions($account, $permissions, 'OR');
  }

}
/**
 * Implements hook_entity_operation().
 */
function intercept_event_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'event_registration') {
    $operation = function($op) use ($entity) {
      return [
        'title' => t(ucwords($op)),
        'url' => \Drupal\Core\Url::fromRoute("entity.event_registration.{$op}_form", [
          'event_registration' => $entity->id(),
          'destination' => \Drupal\Core\Url::fromRoute('<current>')->toString(),
        ]),
      ];
    };
    return [
      'cancel' => $operation('cancel'),
    ];
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function intercept_event_entity_extra_field_info() {
  $extra = [];

  $extra['node']['event']['display']['evaluation_attendee_default'] = [
    'label' => t('Evaluation default (attendee)'),
    'description' => t('View evaluation widget for attendees.'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  $extra['node']['event']['display']['evaluation_attendee_js'] = [
    'label' => t('Evaluation JS widget (attendee)'),
    'description' => t('View evaluation widget for attendees.'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  $extra['node']['event']['display']['evaluation_staff'] = [
    'label' => t('Evaluation (staff)'),
    'description' => t('View evaluation widget for staff users.'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  $extra['event_attendance']['event_attendance']['form']['event_summary'] = [
    'label' => t('Event summary'),
    'description' => t('View event summary information.'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  $extra['node']['event']['form']['recurring_event'] = [
    'label' => t('Recurring event'),
    'description' => t('View event recurrence information.'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_entity_type_build().
 */
function intercept_event_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['node']
    ->setFormClass('template', 'Drupal\intercept_event\Form\EventTemplateForm')
    ->setLinkTemplate('template-form', '/node/{node}/template')
    ->setFormClass('recurrence', 'Drupal\intercept_event\Form\EventRecurrenceEventsForm')
    ->setLinkTemplate('recurrence-form', '/node/{node}/recurrences');
}

/**
 * Implements hook_node_access().
 */
function intercept_event_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  if ($node->bundle() == 'event' && $op == 'template') {
    return AccessResult::allowedIfHasPermission($account, 'create event content from template');
  }
  if ($node->bundle() == 'event' && $op == 'analysis') {
    return AccessResult::allowedIfHasPermission($account, 'analyze events');
  }
  if ($node->bundle() == 'event' && $op == 'scan') {
    return AccessResult::allowedIfHasPermission($account, 'scan event_attendance');
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_field_access().
 */
function intercept_event_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {
  // Check if it's edit because 'view' might not have any items.
  if ($operation == 'edit') {
    if ($items->getEntity()->bundle() == 'event' && $field_definition->getName() == 'field_event_is_template') {
      return AccessResult::forbiddenIf(!$account->hasPermission('edit event field field_event_is_template'));
    }
    if ($items->getEntity()->bundle() == 'event' && $field_definition->getName() == 'field_featured') {
      return AccessResult::forbiddenIf(!$account->hasPermission('edit event field field_featured'));
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function intercept_event_pathauto_alias_alter(&$alias, array &$context) {
  if ($context['module'] == 'node' && $context['bundle'] == 'event') {
    \Drupal::service('intercept_event.manager')->addRegisterAlias($context['data']['node'], $alias);
  }
}

/**
 * Implements hook_node_delete().
 */
function intercept_event_node_update(\Drupal\node\NodeInterface $node) {
  if ($node->bundle() == 'event') {
    if ($node->path->pathauto) {
      return;
    }
    \Drupal::service('intercept_event.manager')->addRegisterAlias($node);
  }
}

/**
 * Implements hook_node_insert().
 */
function intercept_event_node_insert(Drupal\node\NodeInterface $node) {
  if ($node->bundle() == 'event') {
    if ($node->path->pathauto) {
      return;
    }
    \Drupal::service('intercept_event.manager')->addRegisterAlias($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function intercept_event_node_delete(Drupal\node\NodeInterface $node) {
  if ($node->bundle() == 'event') {
    \Drupal::service('intercept_event.manager')->deleteRegisterAlias($node);
    return;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function intercept_event_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $view = $form_state->get('view');
  if ($view->id() == 'intercept_events' && $view->current_display == 'embed') {
    $link = function($d, $o, $t) {
      $query = \Drupal::request()->query->all();
      // 2 is upcoming dates combined filter.
      $query['date'] = $d;
      $query['sort'] = $o;
      $query['order'] = 'field_date_time';
      ($d == 1) ? $suffix = ' - ' : $suffix = '';
      return [
        '#type' => 'link',
        '#title' => t($t),
        '#url' => \Drupal\Core\Url::fromRoute('<current>', [], [
          'query' => $query,
        ]),
        '#attributes' => ['class' => ['date-filter', 'date-filter-' . strtolower($t)]],
        '#suffix' => $suffix,
      ];
    };
    $form['links'] = [
      '#weight' => -5,
      'past' => $link(1, 'desc', 'Past'),
      'upcoming' => $link(2, 'asc', 'Upcoming'),
    ];
    $form['date']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function intercept_event_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node->bundle() == 'event' && $node->hasField('event_recurrence')) {
    \Drupal::service('intercept_event.recurring_manager')->nodeFormAlter($form, $form_state);
  }
  if ($node->bundle() == 'event' && !$node->isNew()) {
    \Drupal::service('intercept_event.manager')->nodeEditFormAlter($form, $form_state);
  }
  $request = \Drupal::service('request_stack')->getCurrentRequest();
  if ($node->bundle() == 'event' && $node->isNew() && $request->query->get('template')) {
    $form['field_event_is_template']['widget']['value']['#default_value'] = 1;
  }
  if ($form_state->getFormObject()->getEntity()->bundle() == 'event') {
    $form['#validate'][] = 'intercept_event_node_event_form_validate';
  }
}

/**
 * Implements hook_node_view().
 */
function intercept_event_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'event' && $display->getComponent('evaluation_attendee_default')) {
    $build['evaluation'] = \Drupal::service('intercept_event.evaluation_manager')
      ->getDefaultForm($entity);
  }
  if ($entity->bundle() == 'event' && $display->getComponent('evaluation_attendee_js')) {
    $build['evaluation'] = \Drupal::service('intercept_event.evaluation_manager')
      ->getJsForm($entity);
  }
  if ($entity->bundle() === 'event' && $entity->field_must_register->value === '1') {
    $build['register_prompt'] = [
      '#markup' => '<div class="event-register-button js--event-register-button" data-event-uuid="' . $entity->uuid() . '"></div>',
      '#attached' => [
        'library' => ['intercept_event/eventRegisterButton'],
        ]
      ];
  }
}

/**
 * Custom form validation for the event node form.
 *
 * @see intercept_event_form_node_form_alter()
 */
function intercept_event_node_event_form_validate(&$form, FormStateInterface $form_state) {
  // Skip validation if registration is not required.
  $values = $form_state->getValues();
  $must_register = !empty($values['field_must_register']) ? $values['field_must_register']['value'] : FALSE;
  if (!$must_register) {
    return;
  }

  // In this case a partial date was entered, but is invalid.
  $errors = $form_state->getErrors();
  if (!empty($errors['field_event_register_period][0']) || !empty($errors['field_date_time][0'])) {
    // Skip to avoid overcomplicating our date validation.
    return;
  }

  $valid_dates = function($date_array) {
    if (empty($date_array['value']) || empty($date_array['end_value'])) {
      return FALSE;
    }
    if (!($date_array['value'] instanceof \Drupal\Component\Datetime\DateTimePlus) || !($date_array['end_value'] instanceof \Drupal\Component\Datetime\DateTimePlus)) {
      return FALSE;
    }
    return TRUE;
  };

  $dates_event = $values['field_date_time'][0];
  $dates_registration = $values['field_event_register_period'][0];

  if (!$valid_dates($dates_registration)) {
    $form_state->setErrorByName('field_event_register_period[0', t('Registration period is required.'));
    return;
  }
  if (!$valid_dates($dates_event)) {
    // This should not be possible, but just in case so further validation does not break.
    $form_state->setErrorByName('field_event_register_period[0', t('Event date is invalid.'));
  }

  // TODO: Check to see if date module has already set an error on the
  // end value being before the start value.
  $get_field_name = function ($field, $field_name = 'field_event_register') {
   $parents = [$field_name . '_period', 0, $field];
   return implode('][', $parents);
  };

  $title = $form['field_event_register_period']['widget']['#title'];

  if (!$dates_event['end_value']->diff($dates_registration['end_value'])->invert) {
    $form_state->setErrorByName($get_field_name('end_value'), t('The @title must end before the event end date.', [
      '@title' => $title,
    ]));
  }
  if (!$dates_event['value']->diff($dates_registration['value'])->invert) {
    $form_state->setErrorByName($get_field_name('value'), t('The @title must start before the event start date.', [
      '@title' => $title,
    ]));
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function intercept_event_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];
  if ($entity_type->id() == 'node' && $bundle == 'event') {
    $fields['registration'] = \Drupal\Core\Field\BaseFieldDefinition::create('intercept_computed')
      ->setLabel(t('Registration details'))
      ->setComputed(TRUE)
      ->setSetting('properties', [
        'total' => DataDefinition::create('integer')->setLabel(t('Total registrations')),
        'total_waitlist' => DataDefinition::create('integer')->setLabel(t('Total waitlisted')),
        'status' => DataDefinition::create('string')->setLabel(t('Status')),
        'status_user' => DataDefinition::create('string')->setLabel(t('Status for current user')),
      ])
      ->setClass(\Drupal\intercept_event\EventRegistrationField::class);

    $fields['event_recurrence'] = \Drupal\Core\Field\BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Event recurrence'))
      ->setSetting('target_type', 'event_recurrence')
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_entity_base_field_info().
 */
function intercept_event_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
    $definitions = [];
    $definitions['event_recurrence'] = \Drupal\Core\Field\BaseFieldDefinition::create('entity_reference')
      ->setName('event_reccurence')
      ->setLabel(t('Event recurrence'))
      ->setTargetEntityTypeId($entity_type->id())
      ->setSettings([
        'unsigned' => false,
        'size' => 'normal',
        'target_type' => 'event_recurrence',
      ])
      ->setCardinality(1);
    return $definitions;
  }
}
