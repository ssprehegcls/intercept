<?php

/**
 * @file
 * Contains intercept_room_reservation.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\intercept_room_reservation\Entity\RoomReservationInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function intercept_room_reservation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the intercept_room_reservation module.
    case 'help.page.intercept_room_reservation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Room reservation functionality for the InterCEPT library') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_node_access().
 */
function intercept_room_reservation_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  if ($node->bundle() == 'room' && $op == 'view') {
    if ($node->field_staff_use_only->getString() === "1" && !$account->hasPermission('view staff use room reservation')) {
      return AccessResult::forbidden()->cachePerPermissions()->cachePerUser()->addCacheableDependency($node);
    }
  }
   // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_preprocess_page.
 */
function intercept_room_reservation_preprocess_page(array &$variables) {
  $limit = \Drupal::config('intercept_room_reservation.settings')->get('reservation_limit', 0);
  $variables['#attached']['drupalSettings']['intercept']['room_reservations']['customer_limit'] = $limit;
}

/**
 * Implements hook_entity_operation().
 */
function intercept_room_reservation_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'room_reservation' ) {
    $operation = function($op) use ($entity) {
      return [
        'title' => t(ucwords($op)),
        'url' => Url::fromRoute("entity.room_reservation.{$op}_form", [
          'room_reservation' => $entity->id(),
          'destination' => Url::fromRoute('<current>')->toString(),
        ]),
      ];
    };

    $operation_types = ['cancel', 'approve', 'decline'];

    $operations = [];

    foreach ($operation_types as $type) {
      if (!$entity->access($type)) {
        continue;
      }
      $operations[$type] = $operation($type);
    }

    return $operations;
  }
  return [];
}

/**
 * Implements hook_theme().
 */
function intercept_room_reservation_theme() {
  return [
    'room_reservation' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for Room reservation templates.
 *
 * Default template: room_reservation.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_room_reservation(array &$variables) {
  // Fetch RoomReservation Entity Object.
  $room_reservation = $variables['room_reservation'] = $variables['elements']['#room_reservation'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['label'] = $room_reservation->label();
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function intercept_room_reservation_theme_suggestions_room_reservation(array $variables) {
  $suggestions = [];
  $room_reservation = $variables['elements']['#room_reservation'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'room_reservation__' . $sanitized_view_mode;
  $suggestions[] = 'room_reservation__' . $room_reservation->bundle();
  $suggestions[] = 'room_reservation__' . $room_reservation->bundle() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function intercept_room_reservation_entity_extra_field_info() {
  $extra = [];

  $extra['room_reservation']['room_reservation']['display']['location_full'] = [
    'label' => t('Full location'),
    'description' => t('Location title and room name'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  $extra['room_reservation']['room_reservation']['display']['attendees_full'] = [
    'label' => t('Attendee count'),
    'description' => t('Atendee count and label'),
    'weight' => 15,
    'visible' => FALSE,
  ];
  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view()().
 */
function intercept_room_reservation_room_reservation_view(array &$build, RoomReservationInterface $room_reservation, EntityViewDisplayInterface $display, $view_mode) {
  $build['location_full'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => ['class' => 'field-location-full'],
    '#value' => $room_reservation->location(),
   ];

  $count = $room_reservation->field_attendee_count->getString();
  $build['attendees_full'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => ['class' => 'field-attendees-full'],
    '#value' => !empty($count) ? t('@count Attendees', [
      '@count' => $count,
    ]) : '',
   ];

}
