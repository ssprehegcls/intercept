<?php

/**
 * @file
 * Contains intercept_room_reservation.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\intercept_room_reservation\Entity\RoomReservationInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_help().
 */
function intercept_room_reservation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the intercept_room_reservation module.
    case 'help.page.intercept_room_reservation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Room reservation functionality for the InterCEPT library') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_node_access().
 */
function intercept_room_reservation_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  if ($node->bundle() == 'room' && $op == 'view') {
    if ($node->field_staff_use_only->getString() === "1" && !$account->hasPermission('view staff use room reservation')) {
      return AccessResult::forbidden()->cachePerPermissions()->cachePerUser()->addCacheableDependency($node);
    }
  }
   // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_preprocess_page.
 */
function intercept_room_reservation_preprocess_page(array &$variables) {
  $limit = \Drupal::config('intercept_room_reservation.settings')->get('reservation_limit', 0);
  $variables['#attached']['drupalSettings']['intercept']['room_reservations']['customer_limit'] = $limit;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function intercept_room_reservation_room_reservation_presave(RoomReservationInterface $entity) {
  if ($entity->statusHasChanged()) {
    \Drupal::service('intercept_core.reservation.manager')->notifyStatusChange($entity, $entity->getOriginalStatus(), $entity->getNewStatus());
  }
  if ($entity->isNew()) {
    // If they've signed the agreement, remove it from their session.
    if (\Drupal::service('current_user')->isAnonymous()) {
      return;
    }
    $temp_store = \Drupal::service('user.private_tempstore')->get('reservation_agreement');
    if ($temp_store->get('room')) {
      $temp_store->delete('room');
      if ($entity->hasField('field_agreement')) {
        $entity->field_agreement->setValue(1);
      }
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function intercept_room_reservation_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  // TODO: Move this to the reservation manager.
  if ($entity->getEntityTypeId() == 'room_reservation' ) {
    $operation = function($op) use ($entity) {
      return [
        'title' => t(ucwords($op)),
        'url' => Url::fromRoute("entity.room_reservation.{$op}_form", [
          'room_reservation' => $entity->id(),
          'destination' => Url::fromRoute('<current>')->toString(),
        ]),
      ];
    };

    $operation_types = ['cancel', 'approve', 'decline'];

    $operations = [];

    foreach ($operation_types as $type) {
      if (!$entity->access($type)) {
        continue;
      }
      $operations[$type] = $operation($type);
    }

    return $operations;
  }
  return [];
}

/**
 * Implements hook_theme().
 */
function intercept_room_reservation_theme() {
  return [
    'room_reservation' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_mail().
 */
function intercept_room_reservation_mail($key, &$message, $params) {
  if (!empty($params['reservation_manager'])) {
    /** @var \Drupal\intercept_core\ReservationManager $reservation_manager **/
    $reservation_manager = $params['reservation_manager'];
    $params['reservation_manager']->buildEmail($key, $message, $params);
  }
}

function intercept_room_reservation_form_node_event_edit_form_alter(&$form, $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $manager = \Drupal::service('intercept_core.reservation.manager');
  $reservations = $manager->reservations('room', function($query) use ($node) {
    $query->condition('field_event', $node->id(), '=');
    $query->condition('field_status', ['canceled', 'denied'], 'NOT IN');
  });
  $form['reservations'] = [
    '#title' => t('Reservations'),
    '#type' => 'fieldset',
  ];

  /** @var $view_builder \Drupal\Core\Entity\EntityViewBuilderInterface */
  $view_builder = \Drupal::service('entity_type.manager')
    ->getViewBuilder('room_reservation');

  if (\Drupal::service('module_handler')->moduleExists('js_confirm_pop_up_js')) {
    $form['#attributes']['class'][] = 'js-confirm-pop-up';
    $form['#attached']['library'][] = 'js_confirm_pop_up/js_confirm_pop_up_js';
  }
  $form['reservations']['view'] = $view_builder->viewMultiple($reservations, 'teaser');
  $form['reservations']['create'] = [
    '#type' => 'link',
    '#title' => 'Create a new reservation',
    '#url' => Url::fromRoute('intercept_room_reservation.reserve_room'),
    '#options' => ['query' => [
      'event' => $node->uuid(),
      'step' => 2,
    ]],
  ];
    //'#url' => Url::fromRoute('/reserve-room?event=[event_uuid]&step=2
}

/**
 * Prepares variables for Room reservation templates.
 *
 * Default template: room_reservation.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_room_reservation(array &$variables) {
  // Fetch RoomReservation Entity Object.
  $room_reservation = $variables['room_reservation'] = $variables['elements']['#room_reservation'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['label'] = $room_reservation->label();
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function intercept_room_reservation_theme_suggestions_room_reservation(array $variables) {
  $suggestions = [];
  $room_reservation = $variables['elements']['#room_reservation'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'room_reservation__' . $sanitized_view_mode;
  $suggestions[] = 'room_reservation__' . $room_reservation->bundle();
  $suggestions[] = 'room_reservation__' . $room_reservation->bundle() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function intercept_room_reservation_entity_extra_field_info() {
  $extra = [];

  $extra['node']['event']['form']['reservations'] = [
    'label' => t('Reservations'),
    'description' => t('Manage reservations for this event.'),
    'visible' => FALSE,
  ];

  $extra['room_reservation']['room_reservation']['display']['location_full'] = [
    'label' => t('Full location'),
    'description' => t('Location title and room name'),
    'weight' => 10,
    'visible' => FALSE,
  ];

  $extra['room_reservation']['room_reservation']['display']['attendees_full'] = [
    'label' => t('Attendee count'),
    'description' => t('Atendee count and label'),
    'weight' => 15,
    'visible' => FALSE,
  ];
  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function intercept_room_reservation_room_reservation_view(array &$build, RoomReservationInterface $room_reservation, EntityViewDisplayInterface $display, $view_mode) {
  $build['location_full'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => ['class' => 'field-location-full'],
    '#value' => $room_reservation->location(),
   ];

  $count = $room_reservation->field_attendee_count->getString();
  $build['attendees_full'] = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => ['class' => 'field-attendees-full'],
    '#value' => !empty($count) ? t('@count Attendees', [
      '@count' => $count,
    ]) : '',
   ];
  $build['action_button'] = [
    '#markup' => '<div class="js--room-reservation-action" data-reservation-uuid="' . $room_reservation->uuid() . '" data-status="' . $room_reservation->field_status->value . '" >' . $room_reservation->field_status->value . '</div>',
    '#attached' => [
      'library' => ['intercept_room_reservation/roomReservationActionButton'],
      ]
    ];
}

/**
 * Implements hook_views_query_alter().
 */
function intercept_room_reservation_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'intercept_room_reservations' && $view->current_display == 'embed') {
    foreach ($query->where as &$condition_group) {
      // For each condition in condition group
      foreach ($condition_group['conditions'] as &$condition) {
        if (isset($condition['field']) && strstr($condition['field'], 'field_dates_value')) {
          // Run the query from the beginning of the start date until the end of the end date.
          $condition['field'] = preg_replace("/(?<=AND DATE_FORMAT\(\('\d{4}-\d{2}-\d{2}T)\d{2}:\d{2}:\d{2}' \+ INTERVAL [-+]?\d* SECOND\)/", "23:59:59')", $condition['field']);
          $condition['field'] = preg_replace("/(?<=BETWEEN DATE_FORMAT\(\('\d{4}-\d{2}-\d{2}T)\d{2}:\d{2}:\d{2}' \+ INTERVAL [-+]?\d* SECOND\)/", "00:00:00')", $condition['field']);
        }
      }
    }
  }
}
